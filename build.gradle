plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.12'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.github.resilience4j:resilience4j-spring-boot2:2.0.2'

	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.2'

//	testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.2')
//	testCompile('org.junit.jupiter:junit-jupiter-params:5.9.2')
//	testRuntime('org.junit.jupiter:junit-jupiter-engine:5.9.2')
//	testCompile 'org.mockito:mockito-core:5.2.0'
//	testCompile('org.mockito:mockito-junit-jupiter:5.2.0')

	testCompileOnly("junit:junit")
	testCompileOnly("org.junit.jupiter:junit-jupiter-api")
	testCompileOnly("org.junit.jupiter:junit-jupiter-engine")

	testImplementation 'org.mockito:mockito-junit-jupiter:5.4.0'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

test {
	ignoreFailures = true
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	/*testLogging{
		events "passed", "skipped", "failed"
	}*/
//	jacoco {
//		enabled = true
//		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
//		classDumpDir = file("$buildDir/jacoco/classpathdumps")
//	}
}

tasks.named('test') {
	useJUnitPlatform()
}
